// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma" // Commented out to use default
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  subdomain String?  @unique
  createdAt DateTime @default(now())
  users     User[]
  invites   Invite[]
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  name           String
  role           String   // You can use an enum if you want
  active         Boolean  @default(true)
  lastLogin      DateTime?
  createdAt      DateTime @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  password       String?  // For email/password auth
  emailVerified  DateTime?
  accounts       Account[]
  sessions       Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Invite {
  id             String   @id @default(uuid())
  email          String
  role           String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  invitedBy      String
  status         String   // "PENDING", "ACCEPTED", "EXPIRED"
  createdAt      DateTime @default(now())
  expiresAt      DateTime
}
